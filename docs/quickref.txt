Pyth is a compact programming language in polish (prefix) notation. It has three
data types:

 - real, a real number
 - str, a string of characters
 - list, an ordered list of elements

We will use the following type names in the docs - these aren't concrete types,
they're names for a set of types or an idea:

 - seq: str, list
 - any: any type
 - none: no argument

Lines that start with ";" are comments. Whitespace followed by ";" means that
the rest of the line is a comment. Lines starting with ";#" are meta-commands.
There is one valid meta command as of now:

    ;# end
    Everything after this line is ignored by the interpreter, except
    meta-commands.

The interpreter ignores an even amount of spaces at the start of the line - you
can use this to indent. This is purely for aesthetics.

In multi-character Pyth string literals (") there are only two escape sequences:

    \\ becomes regular backslash
    \" becomes a single quote

All other characters like newlines, tabs, etc., must (and can) be directly
embedded in string literals.

0123456789 are used in numeric literals. A leading zero is a separate token, so
*01 is actually 0 * 1.

A lot of functions can have less arguments than their arity. This is done
through the closing symbols ) and ;. Pyth automatically closes every symbol
that's still left open at the end of the file - this is not an error.

We use the following shorthands in the table below to distinguish overloads:

 - real   ->  r
 - str    ->  s
 - list   ->  l
 - seq    ->  q
 - any    ->  a
 - lambda ->  :
 - none   ->  _

Notice the lambda. Some functions implicitly define one of its arguments as a
lambda function. When this happens, the following expression is nested, giving
the lambda arguments using a, b, c, d and e. The first nesting uses a to store
its argument, then b, etc. If you reach all the way to e, it loops back to a.

Now comes a listing of every Pyth symbol. Column by column it respectively
contains the symbol, the arity (U is unbounded, S is special), the mnemonic, the
argument types if relevant and a description. In the description we will use a,
b, etc as respectively the first, second, etc parameter.

   0 blank          Seperates tokens and surpresses printing.
\n 0 newline        Seperates tokens without surpressing printing.
 " 0 str            String literal.
 \ 0 one-str        One-character string literal.
 ! 1 not            Python not. Returns real: False -> 0, True -> 1.
 & 2 and            Logical and. Short-circuiting.
 | 2 or             Logical or. Short-circuiting.
 ? 3 ternary        Python ternary. ?abc becomes b if a else c.
 (
 ) S close          Close one open expr or block. [) becomes [] in Python.
 ; S close-all      Closes all open symbols and blocks. Infinite ).
 [ U list           Unbounded list literal. Close with ).
 ] 1 one-list       Equivalent to Python [a].
 , 2 pair           Equivalent to Python [a, b].
 _ 1 neg         r  Negation.
                 q  Reverse (a[::-1]).
 + 2 plus           On both same type, Python +.
             al|la  Prepend/append.
             rs|sr  Convert to str and concatenate.
                r_  Absolute value.
                __  Positive infinity.
 - 2 minus      rr  Subtraction.
                rl  Convert a to range (like U) and setwise difference.
                ll  Setwise difference.
             lr|ls  Remove all occurences of b from a.
          ss|rs|sr  Convert to str then remove all occurences of b in a.
                sl  Convert every element in the list to a str and
                    remove all occurences of the elements in b from a.
                r_  Negative absolute value.
                __  Negative infinity.
 * 2 times          Python *.
             rs|sr  Truncate real and repeat sequence.
                sq  Cartesian product.
 /
 %
 ^ 2 power      rr  Power.
                qr  Cartesian product of a with floor(b) repeats.
 = 2 assign         Deep copy assignment. Returns returns the updated value.
                    Supports augmented assignment, e.g. =+Z5 is equal to =Z+Z5
 ~ 2 post-assign    Same as =. Returns the old value.
 < 2 less-than      Python <.
                qr  Python a[:floor(b)].
                rq  Python b[:-floor(a)].
 > 2 greater-than   Python >.
                qr  Python a[floor(b):].
                rq  Python b[-floor(a):].
 :
 @
 {
 } 2 in             Python a in b.
          rr|rs|sr  Check if str(a) is in str(b).
 ` 1 repr           Python repr.
 '
 # S forever        Infinite while loop. On exception, surpresses it and breaks.
 a 0 alphabet       Variable with initial value "abcdefghijklmnopqrstuvwxyz".
 b 0 line-break     Variable with initial value "\n".
 c 0 space          Variable with initial value " ".
 d 0 empty-string   Variable with initial value "".
 e 0 ten            Variable with initial value 10.
 f 2 filter     q:  Filter sequence using lambda function.
                r:  Smallest integer n on [floor(a), inf) where b(n) is truthy.
                 :  Smallest integer n >= 1 such that b(n) is truthy.
 g 
 h 1 head        q  First element (a[0]).
                 r  Increment (a + 1).
 i
 j
 k
 l 1 len            Length of seq. Log base 2 of real.
 m 2 map        q:  List from mapping over sequence using lambda d -> k -> b.
                r:  Convert to range using U before mapping.
 n 2 not-equals     Python a != b.
 o 2 order-by   q:  Sorting with lambda key function using N -> Z.
                r:  Convert to range using U before sorting.
 p 1 print          Print without trailing newline. Returns its input.
 q 2 equals         Python a == b.
 r
 s 1 sum         l  Fold elements using +. Sum of empty list is real 0.
                 s  Convert string to real.
                 r  floor(a).
 t 1 tail        q  Everything but first element (a[1:]).
                 r  Decrement (a - 1).
 u
 v
 w 0 empty-list     Variable with initial value [].
 x 1 auto-assign    Has arity 1 on first usage, where xa means =xa. Simple
 y 1 auto-assign    variable with arity 0 later. y works exactly the same.
 z 0 zero           Variable with initial value 0.
 A
 B 0 break          Python break. Implicit ).
 C
 D
 E S else           Python else. Implicit ).
 F S for            Fa becomes Python's for var in a. Opens a block. Variable
                    rotates as lambda variables. Works as FUa if a is real.
 G
 H 1 end         q  Last element (a[-1]).
 I 1 if             Python's if a. Opens a block.
 J
 K
 L 1 lambda         On first occurrence define lambda function with parameter b
                    and call (arity 2, call is optional), later occurrences only
                    call the lambda.
 M
 N
 O
 P
 Q
 R
 S 1 sorted      q  Sorts the sequence.
                 r  If a > 0 range(1, 1+floor(a)) else range(1+floor(a), 1)
 T 1 pop         q  Everything but the last element. (a[:-1]).
                 r  Modulo 10 (a % 10).  
 U 1 unary-range q  Python range(len(a)).
                 r  If a > 0 range(floor(a)) else range(floor(a), 0).
 V
 W S while          Python while a. Opens a block.
 X
 Y
 Z
." 0 bin-string     Binary string. ."test" is the same as [116 101 115 116).
.\
.! 1 factorial   r  Factorial or gamma(a+1) function.
.&
.|
.?
.(
.)
.;
.[
.]
.,
._
.+
.-
.*
./
.%
.^
.=
.< 2 leftshift  rr  Python floor(a) << floor(b).
                qr  Cyclic leftshift of a by floor(b).
.> 2 rightshift rr  Python floor(a) >> floor(b).
                qr  Cyclic rightshift of a by floor(b).
.:
.@
.{
.}
.`
.'
.~
.#
.$
.a
.b
.c
.d
.e
.f
.g
.h
.i
.j
.k
.l
.m
.n
.o
.p
.q
.r
.s
.t
.u
.v
.w
.x
.y
.z
.A
.B
.C
.D
.E
.F
.G
.H
.I
.J
.K
.L
.M
.N
.O
.P
.Q
.R
.S
.T
.U
.V
.W
.X
.Y
.Z
$a 0 alphabet-$     Variable with initial value "abcdefghijklmnopqrstuvwxyz".
$q 0 qwerty         Variable with initial value "qwertyuiopasdfghjklzxcvbnm".
$A 0 ALPHABET       Variable with initial value "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
$Q 0 QWERTY         Variable with initial value "QWERTYUIOPASDFGHJKLZXCVBNM".
